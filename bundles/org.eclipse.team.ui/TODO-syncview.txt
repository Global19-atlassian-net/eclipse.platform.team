======================================================================
 EXAMPLE TEAM UI API USAGES
======================================================================
1. embeding sync viewer in dialog/wizard
2. added a new content provider (logical views of sync info changes)
3. adding custom label decorations
4. actions/menus
5. fetching sync info set without instantiating a participant
6. fetch and wait for the event collector to finish processing the changes
7. showing in a diff viewer either a static model (doesn't update when changes occur) or dynamic
  
======================================================================
 PR LIST (07-01-2004)
======================================================================

x P3 schedule support by participant. 
	this requires changing the refresh jobs to accept scheduling different jobs. Essentially being able to have an 
	ordered *queue of refreshes. Also, participant will need a schedule object to encapsulate the schedule logic.

x P3 status message could be more precise instead of simply "Working". But to do this we need access to the job progress monitor 
  and it isn't available API from the UI. (removed status in sync view, progress will be shown in the progress shell).

x P1 end of refresh prompt should be a property change notice, and let the participant decide what to do!

x P2 decide overview page contents and how it should be used

x remove duplicated tree/table viewers classes. the orignial ones simply have the INavigable behavior.

x P1 make changes section only be a pagebook. this would easily allow adding any number of composites to the page?
  should look at memory consuption and ensure that we are disposing properly!

- compareeditorinput fetcheds remote content outside of a progress monitor

x decorations for SyncInfoDiffElements (of which type.. project persistent property setting?)
x labels for compare editors (text merge viewers and title for diff viewer)

x generic navigate support for SyncInfoDiffTreeViewer, PRd compare for API support

x readonly state for compare panes

- progress support added when fetching (e.g. caching contents in ITypedElement). This will require compare to add some API.

x INavigable in compare needs to be made API.

- details dialog needs to create composites once then display them. Or only create once!!!!

x sync set filtering creation must be more precise. For example you should be able to specify a root and a direction.

x cvs update/commit action in sync view toolbar are not updating their state anymore :(

x P3 mode switching at the end of a refresh to ensure that changes are shown if available

x P2 need an event for adding roots to a subscriber to update the list shown

x memory and sync set disposal in syncsetcompare input!!!! VERY IMPORTANT!!!

- overiding outgoing/incoming doesn't show the changes in the commit dialog because the filter is only configured to show in one direction.
  
======================================================================
 PR LIST (16-01-2004)
======================================================================
- progress monitoring in SyncSet.reset and such. there are many places where null progress monitors are passed along.
- showing sync view in commit dialog is complicated because there is no easy way of finding out exactly which resources will be committed at the
  point the commit comment dialog is shown. Need to provide new API on the commit dialog for this.
- convert details dialogs that show sync view into wizards, this allows more room to browse the changes. almost like the refactoring. Preview >> button instead of Next >>.
x job status handler API or not??

======================================================================
 PR LIST (26-01-2004)
======================================================================
x navigable APIs must be consolidated, sync view navigation
x compare configuration review
x logical view extensions [not going to do this in 3.0]
x content provider should not assume diff nodes have associated resources
  - content provider input? Is it a diff node or sync set? diff node hack required for getting the
    compare editor input working.
x viewer input as a diffnode with a sync set seems wrong?
- share reconciling with existing (e.g. using compare contents to resolve)
x comment grouping logical view
- target migration

======================================================================
 PR LIST (30-01-2004) MV
======================================================================
x actions in sync view all assume that selection will have a resource (e.g refresh action). 
  - how would a refresh know what to select if a change comment node was selected, for example
  - could first attempt to obtain resource and, if that fails, visit children to obtain resources
  [jm] I think that actions will have to know about DiffNodes and we need the helper to
  get the list of children nodes.
  [jm] added Utils.getResources(Iselection) does all the logic for retreiving resources
- sorter is related to input so may need to change when input does
  - there does not appear to be a clean way to change the sorter and input without causing two refreshes
- SyncInfoSet##getOutOfSyncDescendants(IResource) is speced to include the resource itself if it is out-of-sync
  - this is a bit confusing as the name implies otherwise
  - should either consider a name change or a spec change
  [jm] I never understood why is was spec'd like that :) You can decide...
x compare input requires root node to have children or diff viewer is not added
  - this is problematic when creating a wizard page that is dynamically populated
  - not sure if there's problems caused by returning true when there are no children
  [jm] I think this it's fine to have root nodes return true to hasChildren. I don't like
  compares subtle way of determining is the diff viewer should be shown, but in our case a
  root node can safely always have children.
x several places require a resource
  - e.g. conflict propogation requires a resource but shouldn't (modified to work without a resource)
  x conflicts do not propogate in comment view [jm] fixed
  [jm] we have to change this assumption everywhere! Actions, label decorators... and such. 
  [jm] does sync info diff node require a resource? currently it does. But I still don't like
  the SyncSet methods that take IResource.ROOT to return first level children.
x there are times when the sync set changes but the input hasn't yet and the given input
  doesn't handle outgoing changes. For example, when changing from incoming to outgoing with
  the change log root, the change log root gets a reset from the sync set then the input
  is changed. this can cause an NPE. Must look into the ordering here.
  [mv] I think we have to make the statement that the content provider must handle all sync types
  in some fashion. I recall that we discussed the restriction that a sync diff root node must
  show all elements in it's sync set. Could the comment builder place all outgoing changes in 
  an additional section. The user would never see this but it would fulfill the contract.
  [jm] yes, this is what i ended up doing.
  [mv] for efficiency, we should still try to couple the mode change with the content provider
  change so that the diff node tree is not built and displayed twice during a change
- the test cases starve the subscriber event handler such that an event has additions and removals for the same resources
  - this causes failures in the diff tree builders
  - although less likely in UI, can still happen
  - need tests for these scenarios to ensure generated event is correct after addition and removal
x there are several places in SyncInfoSet and in the DiffNodes where we must use the workspace root
  as the input resource to imply get all members? Maybe this should be cleaned up a bit.
x SyncInfoSet must be cleaned up a lot, the API is vague and method names are not clear.
  x we need a way to ensure that the sync set does not change while we are building a diff tree
  x events are only fired from endInput(). It should work in both batching and non-batching mode  
x SyncInfoDiffNode doesn't have to return a resource or a syncinfo. By definition a diff node already has API
  for returning a sync kind getKind() and access to all three resources getRight(), getLeft(), getAncestor().

======================================================================
 PR LIST (02-02-2004) MV
======================================================================
x sync view title says "Summary" when first opened
- would like to show subscriber roots as compressed folders at root of sync view
  - sync set needs to have the concept of roots
x How is a reset propogated through the sync set chain. 
  - I'm concerned that this is adhoc at the moment. we need to make it explicit.
x why must clearModelObjects go deep? Can't you just disconnect from the parent?

======================================================================
 PR LIST (05-02-2004) MV
======================================================================
x I notice that SyncInfoDiffNode requires a resource (via assert) and sync info is only obtained from 
SyncInfoDiffNodes (in Util). This is problematic as now the diff tree cannot contain diff nodes that
do not map to a resource but parent nodes that do. The selection determination for SubscriberAction
needs to walk the diff node tree for this case.

======================================================================
 PR LIST (05-02-2004) Jm
======================================================================
- cvs merge participant doesn't get view progress support because participant is added before
viewer is created. But this should be solvable by ensuring that showInActivePerspective forces
viewer creation in a sync exec.

==============================
- initialize case doesn't work because main page is shown as empty but mode is correct
x how do we handle changes to sync: re-create new nodes or update the nodes with new sync kind?
x new projects don't show up?
- how does our APIs support moves/renames? Do we need another sync state?

=====
x status line doesn't show?
- there's a bunch of non-NLSd strings?
- performance scalability with large sets
- initialization feedback when set is populating?
- scenarios/user doc
  - most sync state stuff must be tested by automated tests
  - progress should have scenarios (expected feedback, init case)
  - errors