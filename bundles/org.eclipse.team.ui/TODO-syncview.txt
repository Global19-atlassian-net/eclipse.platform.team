x P3 schedule support by participant. 
	this requires changing the refresh jobs to accept scheduling different jobs. Essentially being able to have an 
	ordered queue of refreshes. Also, participant will need a schedule object to encapsulate the schedule logic.

x P3 status message could be more precise instead of simply "Working". But to do this we need access to the job progress monitor 
  and it isn't available API from the UI. (removed status in sync view, progress will be shown in the progress shell).

x P1 end of refresh prompt should be a property change notice, and let the participant decide what to do!

x P2 decide overview page contents and how it should be used

x remove duplicated tree/table viewers classes. the orignial ones simply have the INavigable behavior.

x P1 make changes section only be a pagebook. this would easily allow adding any number of composites to the page?
  should look at memory consuption and ensure that we are disposing properly!

- compareeditorinput fetcheds remote content outside of a progress monitor

x decorations for SyncInfoDiffElements (of which type.. project persistent property setting?)
x labels for compare editors (text merge viewers and title for diff viewer)

x generic navigate support for SyncInfoDiffTreeViewer, PRd compare for API support

x readonly state for compare panes

- progress support added when fetching (e.g. caching contents in ITypedElement). This will require compare to add some API.

x INavigable in compare needs to be made API.

- details dialog needs to create composites once then display them. Or only create once!!!!

x sync set filtering creation must be more precise. For example you should be able to specify a root and a direction.

x cvs update/commit action in sync view toolbar are not updating their state anymore :(

x P3 mode switching at the end of a refresh to ensure that changes are shown if available

x P2 need an event for adding roots to a subscriber to update the list shown

x memory and sync set disposal in syncsetcompare input!!!! VERY IMPORTANT!!!

- overiding outgoing/incoming doesn't show the changes in the commit dialog because the filter is only configured to show in one direction.

- example sync view api usages:
  1. embeding sync viewer in dialog/wizard
  2. added a new content provider
  3. adding custom label decorations
  4. actions/menus
  5. fetching sync info set without instantiating a participant
  6. fetch and wait for the event collector to finish processing the changes
  
  
  
  To be PRd:
  - progress monitoring in SyncSet.reset and such. there are many places where null progress monitors are passed along.
  - showing sync view in commit dialog is complicated because there is no easy way of finding out exactly which resources will be committed at the
  point the commit comment dialog is shown. Need to provide new API on the commit dialog for this.
  - convert details dialogs that show sync view into wizards, this allows more room to browse the changes. almost like the refactoring. Preview >> button instead of Next >>.
  - can you have non-diff nodes in the sync view? there shouldn't be any assumptions about the type of diff nodes in the sync view. Basically, any type of diff node should be supported. 
  This would allow adding logical elements to the view don't directly have an associated IResource or SyncInfo.
  - workbenchadapter for SyncInfoSet, SyncInfo objects?