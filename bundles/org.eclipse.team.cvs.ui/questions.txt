Questions/comments related to resource traversals

Questions:

- [DONE] It would be helpful to have an IResourceMapping#getProjects() to make project containment detection easier.
Should we add this? We could also remove the getProjects() from the traversal.

- What about a visit on resource mapper that accepts a resource visitor (submitted bug 81521 to Platform Resources)

- I noticed that the ITraversalContext throws exceptions under some non-exceptional cases
(e.g. a remote doesn't exist). Perhaps we should consider returning null here instead.

- Are heterogeneous selections supported?
   - case 1: Two model objects that map to different providers
   - case 2: A single model object that spans multiple providers
   
- Ignored resource handling
   - How do we handle a logical model element (i.e. traversals) that contains ignored resources 
   (due to provider ignores) but are part of the model. This is easy for depth-zero traversals
   but tricky for depth one and depth infinite.

Pending Items:

 - Action nablement code is not mapping aware
 
 - Decide how to convert selected resources into mappers. Choices are a single mapper for multiple resources or 
   a mapper per resource. The advantage of the second approach is that the mapper list will display each resource
   as opposed to a single entry that must be expanded or selected to see the resources it maps to.
 
 - [DONE] CVS commands need to respect DO_NOT_RECURSE flag 
 	- DONE and TESTED for Update, Commit, Add, Tag and Branch

 - Workspace subscriber refreshes are always deep but could be optimized to be shallow when possible

 - [DONE] Commit needs to be reworked but I'm postponing this until Silvio is done

 - [DEFERRED] Sync/Compare with Tag/Merge are a bit more complicated.
   - they require a scope that will allow the particpant to access the depth of the traversals
   - for now, they will be deep on th roots of the traversals

 - [DEFERRED] EditAction, UneditAction, ShowEditorsAction, GenerateDiffFileAction do not follow the standard action/operation pattern.
   - The patch is complicated by current architecture (i.e. single resource root)

 - [DONE] TagLocalAction requires dirty prompting: need a dialog which shows mappers and traversals
    - also the TagAction hierarchy is smelly due to shared code between local and remote tagging
    
 - [DONE] Need a mapper view that has a list of selected mappers and a details area that shows the resources that each mapper maps to.
   - this is generally useful and could be used for TagLocalAction prompt
 
 - [DEFERRED] Could also have a mapper view that shows the selected mappers and shows a sync page for the mappers.
   - this is required for the new commit wizard and could be used for the TagLocalAction prompt
 
 - [NOOP] Synchronize view actions?
 	- always work on the visible resources so no extra action should be needed.
 
 - [DEFERRED] ResourceMappingScope: resources determined by traversing subscriber. Subcriber changes may adjust the roots of the scope.
   A trickier problem is that, if we keep a participant around, model changes may occur. This is a problem as there is no generic
   model change mechanism.
   
   - The roots of the scope are the resources of the traversals. There may be duplication when all the resources are combined.
   
   - In order to filter a sync page by mappers, the sync scope needs to be pushed down into the collectors and scope methods 
     need to be added to provide access to the traversal depth
     
 - Transitive adapters
   - [PATCH READY] transitivity from IResource to ResourceMapping in adapter manager
     - is this need if UI does special handing?
   - [PATCH READY] add ResourceMapping support to objectContribution handling
   - repository persistant property filtering for ResourceMappings (PropertyTester)
   	  - remove WorkbenchResourceMapping action filter!
   
 - Add to version control, ignore on Project
     
 - Performance!!!
     
Summary of changes:

 - actions that support resource mappers are subclasses of WorkspaceTraversalAction
 
 - RepositoryProviderAction handles most of the work for translating from a mapper to resources.
   Subclasses decide on what the depth is using a recurse parameter on the execute method.
   
 - tests added for Update, Commit, Tag, Branch and Add
 
 - introduced MappingSelecitonDialog which aloows the user to select on or more mappings and inspect the
   resources contained in the mapping.
   
Actions that don't need to change:

 - UnmanageAction is always deep and should only be on IProject and things that adapt to a project.
 
 - Compare/Replace with revision, ShowAnnotationAction, ShowResourceInHistoryAction are single select 
   on IFile (and adapters).
   
 - Although SetKeywordSubstitutionAction could change, my inclination is to leave it as is since it is
   not part of the day to day workflow and its use should decline now the better handle types up front.
